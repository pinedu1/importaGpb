package br.com.pinedu.importa

import br.com.pinedu.importa.pattern.Command
import groovy.sql.GroovyRowResult
import groovy.sql.Sql

class Pais implements Command {
	File arquivoPais
	Sql db
	@Override
	public void criaTabela() {
		db.execute("DROP TABLE IF EXISTS pais CASCADE;")
		db.execute("""
CREATE TABLE IF NOT EXISTS pais (
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
nome character varying(72) COLLATE pg_catalog."default" NOT NULL,
sigla character varying(2) COLLATE pg_catalog."default" NOT NULL,
ingles character varying(72) COLLATE pg_catalog."default",
frances character varying(72) COLLATE pg_catalog."default",
abrvact character varying(3) COLLATE pg_catalog."default",
ativo boolean,
sistema boolean,
CONSTRAINT "paisPK" PRIMARY KEY (id),
CONSTRAINT uq_pais_nome UNIQUE (nome),
CONSTRAINT uq_pais_sigla UNIQUE (sigla)
);
""")
	}

	@Override
	public void execute() {
		Map<String, Integer> schema = [
				primeiroCaracter: 1
				, sigla: 2
				, abrvact: 3
				, nome: 72
				, ingles: 72
				, frances: 72
				, abrvect: 36
				, separador_0: 259
		]
		arquivoPais.eachLine("ISO-8859-1") { String linha ->
			String primeiroCaracter = linha.substring(0, 1)
			if ("#".equals(primeiroCaracter) || "C".equals(primeiroCaracter)) return
			Map<String, Object> result = FixedWidthParser.parse(linha, schema)
			result << [ sistema: true, ativo: true ]
			db.executeInsert('INSERT INTO public.pais( nome, sigla, ingles, frances, abrvact, ativo, sistema ) VALUES ( :nome, :sigla, :ingles, :frances, :abrvact, :ativo, :sistema );', result)
		}
	}

	public void leArquivo(String path) throws Exception {
		arquivoPais = new File("${path}/DNE_GU_PAISES.TXT")
	}

	@Override
	void finaliza() {

	}
}
